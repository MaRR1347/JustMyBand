@page "/songview"
@rendermode InteractiveServer

@using System.Text.RegularExpressions

@inject Services.QueueService QueueService
@inject Services.SongService SongsService
@inject NavigationManager Navigation

@using Models


<section class="song-view">
    <div id="container">
        <section id="song">
            @if (queue.Count > 0)
            {
                GetText();
                <section>
                    <pre>
                        @text
                            </pre>
                </section>
            }
        </section>

        @if (ListOn)
        {
            <section id="list" class="frame">
                <EditForm Model="queueToAdd" OnValidSubmit="AddToQueue" FormName="queue">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <div id="controls">
                        <div class="wymysl_jakas_nazwe">
                            <label for="choose" class="form-label">Choose Song:</label>
                            <InputSelect @bind-Value="queueToAdd.SongId">
                                @for (int i = 1; i <= titles.Count(); i++)
                                {
                                    <option value="@i">@titles[i - 1]</option>
                                }
                            </InputSelect>
                        </div>
                        <button type="submit" class="btn btn-primary">Submit</button>
                    </div>
                </EditForm>
            </section>
        }
        @if (QueueOn)
        {
            <section id="queue" class="frame">
                <table class="table">

                    <thead>
                        <tr>
                            <th>Number</th>
                            <th>Title</th>
                            <th> </th>
                        </tr>
                    </thead>

                    <tbody>
                        @for (int i = 0; i < queue.Count(); i++)
                        {
                            int index = i;
                            <tr>
                                <td>@(i + 1)</td>
                                <td>@titles[queue[i].SongId - 1]</td>
                                <td>
                                    <button style="float:right" type="button" class="btn btn-danger" @onclick="@(()=>DeleteFromQueue(queue[index].Id))">Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </section>
        }
        @if (SettingsOn)
        {
            <section id="settings" class="frame">
                <UserSettingsComponent></UserSettingsComponent>
            </section>
        }
    </div>

    <section id="song-nav">
        <div class="song-nav-item" id="nav-settings" @onclick="() => { if(!SettingsOn) {TurnFramesOff(1);} else TurnFramesOff();}"><img src="Images/settings.svg" /></div>
        <div class="song-nav-item" id="nav-list" @onclick="() => { if(!QueueOn) {TurnFramesOff(2);} else TurnFramesOff();}"><img src="Images/menu-burger.svg" /></div>
        <div class="song-nav-item" id="nav-queue" @onclick="() => { if(!QueueOn) {TurnFramesOff(3);} else TurnFramesOff();}"><img src=" Images/multiple-alt.svg" /></div>
        <div class="song-nav-item" id="nav-forward" @onclick="@(async ()=>{if(queue.Count > 0)await DeleteFromQueue(queue[0].Id);})"><img src="Images/angle-left.svg" /></div>
    </section>
</section>


@code {
    string? text;
    List<string> titles = new List<string>();
    List<BlazorApp1.Models.Queue> queue = new List<BlazorApp1.Models.Queue>();
    BlazorApp1.Models.Queue queueToAdd = new BlazorApp1.Models.Queue();
    Songs? currentSong;

    public bool SettingsOn = false;
    public bool ListOn = false;
    public bool QueueOn = false;

    public void TurnFramesOff(int WhatsOn = 0)
    {
        SettingsOn = false;
        ListOn = false;
        QueueOn = false;
        switch (WhatsOn)
        {
            case 1:
                SettingsOn = true;
                break;
            case 2:
                ListOn = true;
                break;
            case 3:
                QueueOn = true;
                break;
        }


    }

    public async Task AddToQueue()
    {
        await QueueService.AddToQueue(queueToAdd);

        int id = queueToAdd.SongId;
        queueToAdd = new BlazorApp1.Models.Queue();
        queueToAdd.SongId = id;
    }

    public async Task DeleteFromQueue(int x)
    {
        await QueueService.DeleteFromQueue(x);
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        queueToAdd.SongId = 1;

        QueueService.OnQueueChanged += async (_queue) =>
        {
            await LoadData();
            await InvokeAsync(StateHasChanged);
        };

        SongsService.OnSongsChanged += async (_song) =>
        {
            await LoadData();
            await InvokeAsync(StateHasChanged);
        };
    }

    private async Task LoadData()
    {
        List<Songs> songs = await SongsService.GetAll();
        titles.Clear();
        foreach (var song in songs)
        {
            titles.Add(song.Title);
        }

        queue = await QueueService.GetAll();
        if (queue.Count > 0) currentSong = songs[queue[0].SongId - 1];
    }

    private void GetText()
    {
        text = File.ReadAllText(@"Texts\" + Regex.Replace(currentSong.Title, @"\s", string.Empty) + ".txt");

    }
}
